// =========================================
//  Mixins
// =========================================

// Slanted effect
@mixin skewed {
	position: relative;
	&::after {
		content: '';
		display: block;
		width: 100%;
		height: 50px;
		position: absolute;
		transform: skewY(-2deg);
		@content;
	}
}

// Center containers
@mixin center($width) {
	width: $width;
	max-width: $max-width;
	margin-left: auto;
	margin-right: auto;
}


// rounded elements - using null as the default(instead of none) stops the out put
// of needless css when that property is not required
@mixin roundy($dimension, $border-properties: null) {
	width: $dimension;
	height: $dimension;
	border: $border-properties;
	border-radius: 50%;
}


// create a flex container - props set to null (or providing a default value) are optional
@mixin flexy($display: flex, $direction: null, $wrap: null, $content: null){
	display: $display;
	flex-direction: $direction;
	flex-wrap: $wrap;
	justify-content: $content;
}


// Media Queries - if no match is found the mixin outputs nothing
//@mixin mquery($break-point){
//	@if($break-point == 'xs'){
//		@media (max-width: $break-xs) {
//			@content;
//		}
//	}
//	@else if($break-point == 's'){
//		@media (min-width: $break-s) {
//			@content;
//		}
//	}
//	@else if($break-point == 'm'){
//		@media (min-width: $break-m) {
//			@content;
//		}
//	}
//	@else if($break-point == 'l'){
//		@media (min-width: $break-l) {
//			@content;
//		}
//	}
//}


// media queries using maps - DOES NOT WORK
@mixin mquery($breakpoint){
	$value: map-get($breakpoints, $breakpoint);
	$s: map-get($breakpoints, 's');

	@if($value == null){
		@error '#{break} is not a valid break point name';
	}
	@else if($value < $s){
		@media (max-width: $value) {
			@content;
		}
	}
	@else { // 's', 'm' & 'l'
		@media (min-width: $value) {
			@content;
		}
	}
}


// icon themes
@mixin themes($map){
	// implement color theme using loops
	@each $theme, $color in $map {
		&-#{$theme} {
			color: $color;
		}
	}

}